---
- name: Docker Registry With CA Deploy
  hosts: servers
  become: yes
  
  tasks:
    - name: Gather information about Docker containers
      command: docker ps -aq
      register: docker_container_ids
      changed_when: false
      ignore_errors: yes

    - name: Stop and remove Docker containers
      docker_container:
        name: "{{ item }}"
        state: absent
      loop: "{{ docker_container_ids.stdout_lines }}"

    - name: Uninstall UFW
      ansible.builtin.apt:
        name: ufw
        state: absent

    - name: Create /home/registry/certs directory
      file:
        path: /home/registry/certs
        state: directory
        mode: '0755'

    - name: Create /home/registry/auth directory
      file:
        path: /home/registry/auth
        state: directory
        mode: '0755'

    - name: Update Package Cache
      apt:
        update_cache: yes

    - name: Install required packages
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - apt-transport-https
        - ca-certificates
        - curl
        - openssl
        - apache2-utils

    - name: Generate htpasswd hash for (user:username & pass:password)
      shell: htpasswd -Bbn username password
      register: htpasswd_result

    - name: Display htpasswd hash for (user:username & pass:password)
      debug:
        var: htpasswd_result.stdout

    - name: Save htpasswd result to file for (user:username & pass:password)
      copy:
        content: "{{ htpasswd_result.stdout }}"
        dest: /home/registry/auth/htpasswd
        mode: '0644'

    - name: Copy OpenSSL configuration template
      template:
        src: openssl.conf.j2
        dest: /home/registry/certs/openssl.conf
        mode: '0644'

    - name: Generate self-signed certificate
      command: >
        openssl req -x509 -nodes -newkey rsa:2048
        -keyout /home/registry/certs/domain.key
        -out /home/registry/certs/domain.crt
        -days 365 -config /home/registry/certs/openssl.conf

    - name: Run Docker container for Registry
      docker_container:
        name: registry
        image: registry:2
        detach: yes
        restart_policy: always
        ports:
          - "5000:5000"
        volumes:
          - /home/registry/certs:/certs
          - /home/registry/auth:/auth
          - /reg:/var/lib/registry
        env:
          REGISTRY_HTTP_TLS_CERTIFICATE: /certs/domain.crt
          REGISTRY_HTTP_TLS_KEY: /certs/domain.key
          REGISTRY_AUTH_HTPASSWD_REALM: Registry Realm
          REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd
          REGISTRY_AUTH: htpasswd

    - name: Run Docker ps -a
      command: docker ps -a
      register: docker_ps_result

    - name: Display Docker ps -a Result
      debug:
        var: docker_ps_result.stdout_lines

    - name: Pause for 5 seconds
      pause:
        seconds: 5

    - name: Run Docker Login
      shell: docker login -uusername -ppassword localhost:5000
      register: docker_login_result
      ignore_errors: yes

    - name: Display Docker Login Result (host=localhost:5000 user=username pass=password)
      debug:
        var: docker_login_result.stdout_lines

    - name: Pause for 5 seconds
      pause:
        seconds: 5

    - name: Pull hello-world Docker Image for Test
      shell: docker image pull hello-world

    - name: Tag Docker image >> localhost:5000/hello-world
      shell: docker tag hello-world localhost:5000/hello-world

    - name: Push Docker image >> localhost:5000/hello-world
      shell: docker push localhost:5000/hello-world

    - name: Run Docker images command
      command: docker images
      register: docker_images_result

    - name: Display Docker images Result
      debug:
        var: docker_images_result.stdout_lines

    - name: Pause for 5 seconds
      pause:
        seconds: 5

    - name: Fetch domain.crt from servers
      fetch:
        src: /home/registry/certs/domain.crt
        dest: file.crt

    - name: Create folders in /etc/docker/certs.d/ for other server certificates
      file:
        path: "/etc/docker/certs.d/{{ item }}:5000"
        state: directory
      loop:
        - "{{ hostvars['host1'].ansible_default_ipv4.address }}"
        - "{{ hostvars['host2'].ansible_default_ipv4.address }}"
        - "{{ hostvars['host3'].ansible_default_ipv4.address }}"

    - name: Copy certificates to remote hosts/servers >> /etc/docker/certs.d/
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      loop:
        - { src: 'file.crt/host1/home/registry/certs/domain.crt', dest: "/etc/docker/certs.d/{{ hostvars['host1'].ansible_default_ipv4.address }}:5000/ca.crt" }
        - { src: 'file.crt/host2/home/registry/certs/domain.crt', dest: "/etc/docker/certs.d/{{ hostvars['host2'].ansible_default_ipv4.address }}:5000/ca.crt" }
        - { src: 'file.crt/host3/home/registry/certs/domain.crt', dest: "/etc/docker/certs.d/{{ hostvars['host3'].ansible_default_ipv4.address }}:5000/ca.crt" }

    - name: Remove temp folder locally
      local_action: file path=file.crt state=absent

    - name: Test Docker Login to Host1 on Other Servers
      shell: docker login -uusername -ppassword {{ hostvars['host1'].ansible_default_ipv4.address }}:5000
      register: docker_login_result
      ignore_errors: yes

    - name: Display Docker Login Test to Host1 on Other Servers
      debug:
        var: docker_login_result.stdout_lines

    - name: Pause for 5 seconds
      pause:
        seconds: 5

    - name: Pull Test >> Docker image >> from Host1 Repository >> hello-world
      shell: docker pull {{ hostvars['host1'].ansible_default_ipv4.address }}:5000/hello-world

    - name: Run Docker images command
      command: docker images
      register: docker_images_result

    - name: Display Docker images Result
      debug:
        var: docker_images_result.stdout_lines

    - name: Display Message
      debug:
        msg: "Docker registry with CA deployed on host. Local and remote docker login, push, and pull tests done. Repository info to login and host url >> https://{{ ansible_default_ipv4.address }}:5000/v2/_catalog >> user=username pass=password"

